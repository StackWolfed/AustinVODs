{"version":3,"sources":["components/searchbar.js","App.js","serviceWorker.js","components/navbar.js","components/login.js","index.js"],"names":["SearchBar","react_default","a","createElement","InputGroup","style","paddingTop","Input","InputGroupAddon","addonType","Button","Component","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLogged","_this2","firebase","auth","onAuthStateChanged","user","setState","Container","backgroundColor","Row","Col","sm","md","size","offset","searchbar_SearchBar","Boolean","window","location","hostname","match","initializeApp","apiKey","authDomain","NavThing","props","isSignedIn","uiConfig","signInFlow","signInOptions","GoogleAuthProvider","PROVIDER_ID","callbacks","signInSuccess","componentDidMount","currentUser","getIdToken","then","data","theThing","toggle","bind","assertThisInitialized","isOpen","signOut","Navbar","color","dark","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","logOut","displayName","Login","signInSuccessWithAuthResult","Redirect","to","StyledFirebaseAuth_default","firebaseAuth","ReactDOM","render","navbar_NavThing","HashRouter","basename","Switch","Route","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.56c47707.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { InputGroup,\n        InputGroupAddon,\n        Input,\n        Button } from \"reactstrap\";\n//import firebase from \"firebase\";\n\nexport default class SearchBar extends Component {\n    render() {\n        return (\n            <div>\n                <InputGroup style={{paddingTop: \"10px\"}}>\n                <Input />\n                <InputGroupAddon addonType=\"append\"><Button>Search</Button></InputGroupAddon>\n                </InputGroup>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport firebase from \"firebase\";\nimport { Container, Row, Col } from \"reactstrap\";\n\nimport SearchBar from \"./components/searchbar\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n        isLogged: false\n    }\n  }\n\n  componentDidMount() {\n      firebase.auth().onAuthStateChanged((user) => {\n          if (user != null) {\n              this.setState({\n                  isLogged: true\n              });\n          } else {\n              this.setState({\n                  isLogged: false\n              });\n          }\n        });\n  }\n\n  render() {\n    return (\n      <Container style={{backgroundColor: \"#333333\"}}>\n        <Row>\n        <Col sm=\"12\" md={{ size: 6, offset: 3 }}><SearchBar /></Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\n//Stateless\n/*\n  export const NAME = (props) => {\n    this is already\n    the render function\n  };\n*/\n//State\n/*\n  you need a constructor(props) {\n    super(props) // to call the parent constructor\n    this.state = {\n\n    };\n  }\n*/\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink} from 'reactstrap';\nimport firebase from \"firebase\";\n//import StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyCIPlwX5hVrpR42ETE1O7bwpQNNxMZB2mQ\",\n  authDomain: \"austinvods.firebaseapp.com\"\n})\n  \nexport default class NavThing extends Component {\n    constructor(props) {\n      super(props);\n  \n      this.toggle = this.toggle.bind(this);\n      this.state = {\n        isOpen: false\n      };\n    }\n\n    state = { isSignedIn: false }\n    uiConfig = {\n      signInFlow: \"popup\",\n      signInOptions: [\n        firebase.auth.GoogleAuthProvider.PROVIDER_ID\n      ],\n      callbacks: {\n        signInSuccess: () => false\n      }\n    }\n\n    componentDidMount = () => {\n      firebase.auth().onAuthStateChanged(user => {\n        this.setState({ isSignedIn: !!user });\n        //console.log(\"user\", user);\n        firebase.auth().currentUser.getIdToken().then(data => this.setState({theThing: data}))\n      });\n    }\n\n    toggle() {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    }\n\n    logOut() {\n      firebase.auth().signOut();\n    }\n    //Render Function --------------------------------------------------------------\n    render() {\n      return (\n        <div>\n          <Navbar color=\"dark\" dark expand=\"md\">\n            <NavbarBrand href=\"/AustinVODs\">AustinVODs</NavbarBrand>\n            <NavbarToggler onClick={this.toggle} />\n            <Collapse isOpen={this.state.isOpen} navbar>\n              <Nav className=\"ml-auto\" navbar>\n                <NavItem>\n                  {this.state.isSignedIn ? \n                  //(\"\" + firebase.auth().currentUser.getIdToken().i)\n                  (<NavLink onClick={this.logOut}>{firebase.auth().currentUser.displayName}</NavLink>)\n                  :\n                  (<NavLink href=\"#/login\">Login</NavLink>)\n                  }\n                </NavItem>\n              </Nav>\n            </Collapse>\n          </Navbar>\n        </div>\n      );\n    }\n}","import React, { Component } from 'react';\nimport firebase from \"firebase\";\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nimport { Row, Col, Container} from \"reactstrap\";\nimport { Redirect } from 'react-router-dom';\n\n// firebase.initializeApp({\n//     apiKey: \"AIzaSyDLoqcbTDMFuurtAyDgVEKZ6qwo0j0Osjk\",\n//     authDomain: \"fir-auth-tutorial-ed11f.firebaseapp.com\"\n//   })\n\nexport default class Login extends Component {\n    constructor() {\n        super();\n        this.state = {\n            isLogged: false\n        }\n    }\n\n    componentDidMount() {\n        firebase.auth().onAuthStateChanged((user) => {\n            if (user != null) {\n                this.setState({\n                    isLogged: true\n                });\n            } else {\n                this.setState({\n                    isLogged: false\n                });\n            }\n          });\n    }\n\n    uiConfig = {\n        signInFlow: \"popup\",\n        signInOptions: [\n          firebase.auth.GoogleAuthProvider.PROVIDER_ID\n        ],\n        callbacks: {\n            signInSuccessWithAuthResult: () => false\n        }\n    }\n\n    render() {\n      return (\n        <div>\n          {this.state.isLogged ? \n            (   \n                <Container>\n                <Row>\n                <Col sm=\"12\" md={{ size: 6, offset: 5 }} style={{color: \"white\"}}>You're logged in</Col>\n                <Redirect to=\"../\" />\n                </Row>\n                </Container>\n            )\n          :\n            (<StyledFirebaseAuth\n                uiConfig={this.uiConfig}\n                firebaseAuth={firebase.auth()}\n              />)\n          }\n        </div>\n      );\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport NavThing from './components/navbar';\nimport Login from './components/login';\n\nReactDOM.render(\n    <div style={{backgroundColor: \"#333333\"}}>\n        <NavThing />\n        <HashRouter basename=\"/AustinVODs\">\n            <Switch>\n                <Route exact path=\"/\" component={App} />\n                <Route path=\"/login\" component={Login} />\n            </Switch>\n        </HashRouter>\n    </div>\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}